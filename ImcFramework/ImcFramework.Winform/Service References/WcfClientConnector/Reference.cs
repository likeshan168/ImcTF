//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ImcFramework.Winform.WcfClientConnector {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfClientConnector.IClientConnector", CallbackContract=typeof(ImcFramework.Winform.WcfClientConnector.IClientConnectorCallback))]
    public interface IClientConnector {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientConnector/Register", ReplyAction="http://tempuri.org/IClientConnector/RegisterResponse")]
        void Register(ImcFramework.WcfInterface.EServiceType serviceType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientConnector/Register", ReplyAction="http://tempuri.org/IClientConnector/RegisterResponse")]
        System.Threading.Tasks.Task RegisterAsync(ImcFramework.WcfInterface.EServiceType serviceType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientConnector/UnRegister", ReplyAction="http://tempuri.org/IClientConnector/UnRegisterResponse")]
        void UnRegister(ImcFramework.WcfInterface.EServiceType serviceType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientConnector/UnRegister", ReplyAction="http://tempuri.org/IClientConnector/UnRegisterResponse")]
        System.Threading.Tasks.Task UnRegisterAsync(ImcFramework.WcfInterface.EServiceType serviceType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientConnector/GetServiceList", ReplyAction="http://tempuri.org/IClientConnector/GetServiceListResponse")]
        ImcFramework.WcfInterface.EServiceType[] GetServiceList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientConnector/GetServiceList", ReplyAction="http://tempuri.org/IClientConnector/GetServiceListResponse")]
        System.Threading.Tasks.Task<ImcFramework.WcfInterface.EServiceType[]> GetServiceListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientConnector/RequestSwitch", ReplyAction="http://tempuri.org/IClientConnector/RequestSwitchResponse")]
        void RequestSwitch(ImcFramework.WcfInterface.FunctionSwitch singleSwitch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientConnector/RequestSwitch", ReplyAction="http://tempuri.org/IClientConnector/RequestSwitchResponse")]
        System.Threading.Tasks.Task RequestSwitchAsync(ImcFramework.WcfInterface.FunctionSwitch singleSwitch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientConnector/RequestSwitchs", ReplyAction="http://tempuri.org/IClientConnector/RequestSwitchsResponse")]
        void RequestSwitchs(ImcFramework.WcfInterface.FunctionSwitch[] switchs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientConnector/RequestSwitchs", ReplyAction="http://tempuri.org/IClientConnector/RequestSwitchsResponse")]
        System.Threading.Tasks.Task RequestSwitchsAsync(ImcFramework.WcfInterface.FunctionSwitch[] switchs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientConnector/GetServiceInfo", ReplyAction="http://tempuri.org/IClientConnector/GetServiceInfoResponse")]
        ImcFramework.WcfInterface.ServiceInfo GetServiceInfo(ImcFramework.WcfInterface.EServiceType serviceType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientConnector/GetServiceInfo", ReplyAction="http://tempuri.org/IClientConnector/GetServiceInfoResponse")]
        System.Threading.Tasks.Task<ImcFramework.WcfInterface.ServiceInfo> GetServiceInfoAsync(ImcFramework.WcfInterface.EServiceType serviceType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientConnector/GetLogInfoDates", ReplyAction="http://tempuri.org/IClientConnector/GetLogInfoDatesResponse")]
        ImcFramework.WcfInterface.LogInfo[] GetLogInfoDates(ImcFramework.WcfInterface.EServiceType serviceType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientConnector/GetLogInfoDates", ReplyAction="http://tempuri.org/IClientConnector/GetLogInfoDatesResponse")]
        System.Threading.Tasks.Task<ImcFramework.WcfInterface.LogInfo[]> GetLogInfoDatesAsync(ImcFramework.WcfInterface.EServiceType serviceType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientConnector/GetLogInfos", ReplyAction="http://tempuri.org/IClientConnector/GetLogInfosResponse")]
        void GetLogInfos(ImcFramework.WcfInterface.EServiceType serviceType, string date, string sellerAccount, string logLevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientConnector/GetLogInfos", ReplyAction="http://tempuri.org/IClientConnector/GetLogInfosResponse")]
        System.Threading.Tasks.Task GetLogInfosAsync(ImcFramework.WcfInterface.EServiceType serviceType, string date, string sellerAccount, string logLevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientConnector/GetProgressTotal", ReplyAction="http://tempuri.org/IClientConnector/GetProgressTotalResponse")]
        ImcFramework.WcfInterface.ProgressSummary GetProgressTotal(ImcFramework.WcfInterface.EServiceType serviceType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientConnector/GetProgressTotal", ReplyAction="http://tempuri.org/IClientConnector/GetProgressTotalResponse")]
        System.Threading.Tasks.Task<ImcFramework.WcfInterface.ProgressSummary> GetProgressTotalAsync(ImcFramework.WcfInterface.EServiceType serviceType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientConnector/GetProgressSellerAccountTotal", ReplyAction="http://tempuri.org/IClientConnector/GetProgressSellerAccountTotalResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ImcFramework.WcfInterface.ProgressSummary))]
        ImcFramework.WcfInterface.ProgressItem GetProgressSellerAccountTotal(ImcFramework.WcfInterface.EServiceType serviceType, string sellerAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientConnector/GetProgressSellerAccountTotal", ReplyAction="http://tempuri.org/IClientConnector/GetProgressSellerAccountTotalResponse")]
        System.Threading.Tasks.Task<ImcFramework.WcfInterface.ProgressItem> GetProgressSellerAccountTotalAsync(ImcFramework.WcfInterface.EServiceType serviceType, string sellerAccount);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientConnectorCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IClientConnector/Notify")]
        void Notify(ImcFramework.WcfInterface.MessageEntity msgEntity);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IClientConnector/NotifyLogInfo")]
        void NotifyLogInfo(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IClientConnector/NotifyTaskProgressTotal")]
        void NotifyTaskProgressTotal(ImcFramework.WcfInterface.ProgressSummary totalInfo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IClientConnector/NotifyTaskProgressItemTotal")]
        void NotifyTaskProgressItemTotal(string sellerAccount, int total);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IClientConnector/NotifyTaskProgressItemValueAndTotal")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ImcFramework.WcfInterface.ProgressSummary))]
        void NotifyTaskProgressItemValueAndTotal(string sellerAccount, ImcFramework.WcfInterface.ProgressItem sellerAccountProgress);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IClientConnector/NotifyTaskProgressForceFinish")]
        void NotifyTaskProgressForceFinish(string sellerAccount);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IClientConnector/NotifyTaskProgressFinishAll")]
        void NotifyTaskProgressFinishAll();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientConnectorChannel : ImcFramework.Winform.WcfClientConnector.IClientConnector, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientConnectorClient : System.ServiceModel.DuplexClientBase<ImcFramework.Winform.WcfClientConnector.IClientConnector>, ImcFramework.Winform.WcfClientConnector.IClientConnector {
        
        public ClientConnectorClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ClientConnectorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ClientConnectorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ClientConnectorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ClientConnectorClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Register(ImcFramework.WcfInterface.EServiceType serviceType) {
            base.Channel.Register(serviceType);
        }
        
        public System.Threading.Tasks.Task RegisterAsync(ImcFramework.WcfInterface.EServiceType serviceType) {
            return base.Channel.RegisterAsync(serviceType);
        }
        
        public void UnRegister(ImcFramework.WcfInterface.EServiceType serviceType) {
            base.Channel.UnRegister(serviceType);
        }
        
        public System.Threading.Tasks.Task UnRegisterAsync(ImcFramework.WcfInterface.EServiceType serviceType) {
            return base.Channel.UnRegisterAsync(serviceType);
        }
        
        public ImcFramework.WcfInterface.EServiceType[] GetServiceList() {
            return base.Channel.GetServiceList();
        }
        
        public System.Threading.Tasks.Task<ImcFramework.WcfInterface.EServiceType[]> GetServiceListAsync() {
            return base.Channel.GetServiceListAsync();
        }
        
        public void RequestSwitch(ImcFramework.WcfInterface.FunctionSwitch singleSwitch) {
            base.Channel.RequestSwitch(singleSwitch);
        }
        
        public System.Threading.Tasks.Task RequestSwitchAsync(ImcFramework.WcfInterface.FunctionSwitch singleSwitch) {
            return base.Channel.RequestSwitchAsync(singleSwitch);
        }
        
        public void RequestSwitchs(ImcFramework.WcfInterface.FunctionSwitch[] switchs) {
            base.Channel.RequestSwitchs(switchs);
        }
        
        public System.Threading.Tasks.Task RequestSwitchsAsync(ImcFramework.WcfInterface.FunctionSwitch[] switchs) {
            return base.Channel.RequestSwitchsAsync(switchs);
        }
        
        public ImcFramework.WcfInterface.ServiceInfo GetServiceInfo(ImcFramework.WcfInterface.EServiceType serviceType) {
            return base.Channel.GetServiceInfo(serviceType);
        }
        
        public System.Threading.Tasks.Task<ImcFramework.WcfInterface.ServiceInfo> GetServiceInfoAsync(ImcFramework.WcfInterface.EServiceType serviceType) {
            return base.Channel.GetServiceInfoAsync(serviceType);
        }
        
        public ImcFramework.WcfInterface.LogInfo[] GetLogInfoDates(ImcFramework.WcfInterface.EServiceType serviceType) {
            return base.Channel.GetLogInfoDates(serviceType);
        }
        
        public System.Threading.Tasks.Task<ImcFramework.WcfInterface.LogInfo[]> GetLogInfoDatesAsync(ImcFramework.WcfInterface.EServiceType serviceType) {
            return base.Channel.GetLogInfoDatesAsync(serviceType);
        }
        
        public void GetLogInfos(ImcFramework.WcfInterface.EServiceType serviceType, string date, string sellerAccount, string logLevel) {
            base.Channel.GetLogInfos(serviceType, date, sellerAccount, logLevel);
        }
        
        public System.Threading.Tasks.Task GetLogInfosAsync(ImcFramework.WcfInterface.EServiceType serviceType, string date, string sellerAccount, string logLevel) {
            return base.Channel.GetLogInfosAsync(serviceType, date, sellerAccount, logLevel);
        }
        
        public ImcFramework.WcfInterface.ProgressSummary GetProgressTotal(ImcFramework.WcfInterface.EServiceType serviceType) {
            return base.Channel.GetProgressTotal(serviceType);
        }
        
        public System.Threading.Tasks.Task<ImcFramework.WcfInterface.ProgressSummary> GetProgressTotalAsync(ImcFramework.WcfInterface.EServiceType serviceType) {
            return base.Channel.GetProgressTotalAsync(serviceType);
        }
        
        public ImcFramework.WcfInterface.ProgressItem GetProgressSellerAccountTotal(ImcFramework.WcfInterface.EServiceType serviceType, string sellerAccount) {
            return base.Channel.GetProgressSellerAccountTotal(serviceType, sellerAccount);
        }
        
        public System.Threading.Tasks.Task<ImcFramework.WcfInterface.ProgressItem> GetProgressSellerAccountTotalAsync(ImcFramework.WcfInterface.EServiceType serviceType, string sellerAccount) {
            return base.Channel.GetProgressSellerAccountTotalAsync(serviceType, sellerAccount);
        }
    }
}
